---
title: ""
author: "`Lim Jing Chuan Jonathan`"
format: html
editor: visual
---

# 2021 Details

```{r}
# ─── Top-15 GTI Map with Discrete Country Legend ───

#  Install any missing packages (once):
# install.packages(c(
#   "readxl","dplyr","tidyr","sf","rnaturalearth","ggplot2",
#   "viridis","ggspatial","ggrepel","countrycode"
# ))

library(readxl)
library(dplyr)
library(tidyr)
library(sf)
library(rnaturalearth)
library(ggplot2)
library(viridis)
library(ggspatial)
library(ggrepel)
library(countrycode)
library(grid)   # for unit()

# 1. Load & reshape the GTI data
df <- read_excel("data/Global Terrorism Index 2023.xlsx",
                 sheet = "Overall Scores")
long_df <- df %>%
  pivot_longer(
    cols      = matches("^[0-9]{4} Score$"),
    names_to  = "Year",
    values_to = "Score"
  ) %>%
  mutate(Year = as.integer(sub(" Score", "", Year)))

# 2. Identify Top-15 countries by GTI in 2021
top15_2021 <- long_df %>%
  filter(Year == 2021) %>%
  slice_max(Score, n = 15) %>%
  pull(Country)

# 3. Load world map & join scores for those Top-15, add continent
world <- ne_countries(scale = "medium", returnclass = "sf")
world_top15 <- world %>%
  filter(name %in% top15_2021) %>%
  left_join(
    long_df %>% filter(Year == 2021) %>% select(Country, Score),
    by = c("name" = "Country")
  ) %>%
  mutate(continent = countrycode(name,
                                 origin      = "country.name",
                                 destination = "continent"))

# 4. Compute bounding box + small buffer for zoom
bb    <- st_bbox(world_top15)
xbuf  <- (bb$xmax - bb$xmin) * 0.05
ybuf  <- (bb$ymax - bb$ymin) * 0.05
xlims <- c(bb$xmin - xbuf, bb$xmax + xbuf)
ylims <- c(bb$ymin - ybuf, bb$ymax + ybuf)

# 5. Build continent envelopes (convex hulls)
hulls <- world_top15 %>%
  group_by(continent) %>%
  summarise(geometry = st_union(geometry), .groups = "drop") %>%
  st_convex_hull()

# 6. Label locations for those envelopes (geometry-only centroids)
hull_centroids <- st_centroid(st_geometry(hulls))
hull_labels <- as_tibble(st_coordinates(hull_centroids)) %>%
  bind_cols(select(hulls, continent))

# 7. Prepare discrete legend labels ordered by descending Score
world_top15 <- world_top15 %>%
  arrange(desc(Score)) %>%
  mutate(
    lbl = paste0(name, " (", round(Score,1), ")"),
    lbl = factor(lbl, levels = unique(lbl))
  )

# 8. Generate a palette so that highest-score is darkest
n       <- nrow(world_top15)
palette <- viridis(n, option = "plasma")  # dark purple → yellow
names(palette) <- levels(world_top15$lbl)

# 9. Draw the map
ggplot() +
  # a) world background
  geom_sf(data = world,
          fill  = "grey90",
          color = "white",
          size  = 0.1) +
  # b) highlight Top-15, fill by discrete label
  geom_sf(data = world_top15,
          aes(fill = lbl),
          color = "white",
          size  = 0.2) +
  # c) dashed continent envelopes
  geom_sf(data     = hulls,
          fill     = NA,
          color    = "black",
          linetype = "dashed",
          size     = 0.5) +
  # d) continent labels
  geom_text(data = hull_labels,
            aes(X, Y, label = continent),
            fontface = "bold",
            size     = 3.5) +
  # e) discrete fill scale ordered by descending Score
  scale_fill_manual(
    values = palette,
    name   = "Country (GTI Score 2021)",
    guide  = guide_legend(
      ncol        = 1,
      byrow       = FALSE,
      keywidth    = unit(0.4, "cm"),
      keyheight   = unit(0.3, "cm"),
      label.theme = element_text(size = 6)
    )
  ) +
  # f) zoom to hotspot region
  coord_sf(xlim   = xlims,
           ylim   = ylims,
           expand = FALSE) +
  # g) scale bar
  annotation_scale(location   = "bl",
                   width_hint = 0.2,
                   pad_x      = unit(0.5, "cm"),
                   pad_y      = unit(0.5, "cm")) +
  # h) titles & caption
  labs(
    title    = "Terrorism Hotspots: Top-15 GTI Countries (2021)",
    subtitle = "Darkness reflects descending GTI score; dashed = continental groups",
    caption  = "Source: Institute for Economics & Peace"
  ) +
  # i) clean theme + margins + legend sizing
  theme_void(base_size = 14) +
  theme(
    plot.title         = element_text(face = "bold", hjust = 0.5, size = 16, margin = margin(b = 4)),
    plot.subtitle      = element_text(hjust = 0.5, size = 10, margin = margin(b = 8)),
    plot.caption       = element_text(size = 8, margin = margin(t = 8)),
    plot.margin        = margin(t = 20, r = 20, b = 20, l = 20),
    legend.position    = "right",
    legend.key         = element_rect(fill = "white", color = NA),
    legend.background  = element_rect(fill = "white", color = NA),
    legend.title       = element_text(size = 9, face = "bold"),
    legend.text        = element_text(size = 6)
  )
```

Interactive Map for 2021

```{r}
#  Install any missing packages (once):
# install.packages(c(
#  "readxl", "dplyr", "tidyr", "sf", "leaflet", "rnaturalearthdata", "countrycode"
#))

# ─── Load Libraries ───
library(readxl)
library(dplyr)
library(tidyr)
library(sf)
library(leaflet)
library(rnaturalearth)
library(countrycode)

# ─── 1. Load GTI Scores ───
df_scores <- read_excel("data/Global Terrorism Index 2023.xlsx", sheet = "Overall Scores")

# Convert to long format
long_df <- df_scores %>%
  pivot_longer(
    cols = matches("^[0-9]{4} Score$"),
    names_to = "Year",
    values_to = "Score"
  ) %>%
  mutate(Year = as.integer(sub(" Score", "", Year)))

# Get Top-15 countries in 2021
top15_2021 <- long_df %>%
  filter(Year == 2021) %>%
  slice_max(Score, n = 15) %>%
  pull(Country)

# ─── 2. Load GTI Incident Data ───
df_incidents <- read_excel("data/Global Terrorism Index 2023.xlsx", sheet = "Combined raw")

# Clean & filter incident data
df_summary_2021 <- df_incidents %>%
  filter(Year == 2021, Country %in% top15_2021) %>%
  group_by(Country) %>%
  summarise(
    incidents  = sum(`Incidents`, na.rm = TRUE),
    fatalities = sum(`Fatalities`, na.rm = TRUE),
    injuries   = sum(Injuries, na.rm = TRUE),
    hostages   = sum(Hostages, na.rm = TRUE),
    .groups = "drop"
  )

# ─── 3. Join Spatial Country Shapes ───
world <- ne_countries(scale = "medium", returnclass = "sf")

# Filter spatial data for Top-15
world_top15 <- world %>%
  filter(name %in% top15_2021) %>%
  left_join(
    long_df %>% filter(Year == 2021) %>% select(Country, Score),
    by = c("name" = "Country")
  ) %>%
  left_join(
    df_summary_2021,
    by = c("name" = "Country")
  )

# ─── 4. Create Leaflet Interactive Map ───
leaflet(world_top15) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(
    fillColor = ~colorNumeric("plasma", Score)(Score),
    color = "white",
    weight = 1,
    fillOpacity = 0.8,
    highlightOptions = highlightOptions(
      weight = 3,
      color = "#666",
      fillOpacity = 0.9,
      bringToFront = TRUE
    ),
    label = ~lapply(paste0(
      "<b>", name, "</b><br>",
      "GTI Score: ", round(Score, 1), "<br>",
      "Incidents: ", incidents, "<br>",
      "Fatalities: ", fatalities, "<br>",
      "Injuries: ", injuries, "<br>",
      "Hostages: ", hostages
    ), htmltools::HTML),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "13px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    pal = colorNumeric("plasma", domain = world_top15$Score),
    values = ~Score,
    title = "GTI Score (2021)",
    opacity = 1,
    position = "bottomleft"
  )
```
